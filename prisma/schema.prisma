// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  password            String?
  firstName           String
  lastName            String
  phone               String?
  preferredContactTime String?
  role                String    @default("user")
  provider            String?   // "google", "facebook", "email"
  providerId          String?   // ID from the provider
  
  // Marketing consent tracking
  marketingConsent    Boolean   @default(false)
  consentDate         DateTime?
  consentIpAddress    String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  properties          Property[]
  savedSearches       SavedSearch[]
  propertyAlerts      PropertyAlert[]
  viewingRequests     ViewingRequest[]
  inquiries           PropertyInquiry[]
  savedProperties     SavedProperty[]
  propertyViews       PropertyView[]
  homeEstimates       HomeEstimate[]
}

model Property {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.Text
  price         Float
  beds          Int
  baths         Float
  sqft          Float
  type          String    // house, condo, townhouse
  status        String    // for_sale, for_rent, sold
  address       String
  city          String
  province      String
  postalCode    String
  latitude      Float
  longitude     Float
  features      Json?
  images        Json      // Array of image URLs
  views         Int       @default(0)
  userId        Int       // Agent/Owner
  user          User      @relation(fields: [userId], references: [id])
  
  // CREA Integration fields
  source        String    @default("manual")  // "manual" or "crea"
  externalId    String?   // CREA ListingKey for MLS properties
  mlsNumber     String?   // MLS listing number
  lastSyncAt    DateTime? // Last time synced from CREA
  
  // Enhanced Residential Fields from CREA
  // Lot & Land Details (Critical for acreage properties)
  lotSizeArea   Float?    // Lot size in numeric format
  lotSizeDimensions String? // e.g., "60 X 262"
  lotSizeUnits  String?   // Acres, Square Feet, etc.
  
  // Building Characteristics (Commonly filtered)
  stories       Int?      // Number of stories
  yearBuilt     Int?      // Year property was built
  propertyCondition String? // New, Excellent, Good, etc.
  
  // Location Features (High value for search)
  cityRegion    String?   // Neighborhood/area within city
  waterBodyName String?   // For waterfront properties
  
  // Legal/Property Information (Important for buyers)
  zoning        String?   // Zoning classification
  zoningDescription String? // Detailed zoning description
  taxAnnualAmount Float?  // Annual property taxes
  taxYear       Int?      // Tax assessment year
  parcelNumber  String?   // Legal parcel identifier
  
  // Enhanced Address Components
  streetName    String?   // Street name portion
  streetNumber  String?   // Street number portion
  unitNumber    String?   // Unit/suite number
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  viewingRequests ViewingRequest[]
  inquiries     PropertyInquiry[]
  savedBy       SavedProperty[]
  propertyViews PropertyView[]
  neighborhood  PropertyNeighborhood?

  @@unique([source, externalId])
}

model Neighborhood {
  id                  Int       @id @default(autoincrement())
  name                String    // Neighborhood/Community name
  city                String    // City name
  province            String    // Province/State
  country             String    @default("Canada")
  
  // Location boundaries (optional - for more precise matching)
  centerLatitude      Float?    // Center point latitude
  centerLongitude     Float?    // Center point longitude
  boundingBox         Json?     // Polygon coordinates for neighborhood boundaries
  
  // Metadata from OpenCage API
  formattedAddress    String?   // Full formatted address from geocoding
  confidence          Int?      // OpenCage confidence score (1-10)
  components          Json?     // Raw components from OpenCage
  
  // Statistics (can be calculated)
  propertyCount       Int       @default(0)
  averagePrice        Float?
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  properties          PropertyNeighborhood[]
  
  @@unique([name, city, province])
  @@index([city, province])
}

model PropertyNeighborhood {
  id              Int       @id @default(autoincrement())
  propertyId      Int       @unique
  neighborhoodId  Int
  
  // Relations
  property        Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  neighborhood    Neighborhood  @relation(fields: [neighborhoodId], references: [id])
  
  // Geocoding metadata
  confidence      Int?      // Confidence of the geocoding match
  lastLookup      DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([neighborhoodId])
}

model ContentBlock {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String
  content   String   @db.Text
  type      String   // text, html, image, testimonial
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedSearch {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyAlert {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  
  // AI search details
  naturalQuery    String    // "4 bedroom house with garage in Edmonton"
  parsedFilters   Json      // AI-extracted filters
  city            String?   // User's preferred city
  
  // Scheduling
  frequency       String    // "2h", "4h", "12h", "24h", "7d", "14d", "30d"
  isActive        Boolean   @default(true)
  lastRun         DateTime?
  nextRun         DateTime?
  
  // Notification preferences  
  emailEnabled    Boolean   @default(true)
  pushEnabled     Boolean   @default(false)
  
  // Privacy and tracking
  marketingConsent Boolean  @default(false)
  consentDate     DateTime?
  
  // Results tracking
  lastResults     Json?     // Store property IDs from last run
  totalSent       Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ViewingRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  propertyId  Int
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  dateTime    DateTime
  status      String   // pending, approved, rejected, completed
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyInquiry {
  id          Int      @id @default(autoincrement())
  userId      Int?
  propertyId  Int
  user        User?    @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  message     String   @db.Text
  status      String   // pending, responded, closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SavedProperty {
  id          Int      @id @default(autoincrement())
  userId      Int
  propertyId  Int
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, propertyId])
}

model PropertyView {
  id          Int      @id @default(autoincrement())
  userId      Int?
  propertyId  Int
  user        User?    @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

model EmailTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  subject     String
  content     String   @db.Text
  variables   Json?    // Available template variables
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HomeEstimate {
  id              Int      @id @default(autoincrement())
  userId          Int?     // Optional - can be guest submission
  user            User?    @relation(fields: [userId], references: [id])
  
  // Property Details
  address         String
  postalCode      String
  propertyType    String   // single_family, townhouse, condo, etc.
  beds            Int
  baths           Float
  sqft            Float
  yearBuilt       Int
  lotSize         String
  
  // Features
  condition       String   // excellent, good, fair, etc.
  features        Json?    // Array of selected features
  renovations     Json?    // Array of recent renovations
  additionalInfo  String?  @db.Text
  
  // Contact Information
  firstName       String
  lastName        String
  email           String
  phone           String
  timeframe       String   // immediate, 3_months, etc.
  contactPreference Boolean @default(false) // prefer email
  
  // Status and Management
  status          String   @default("pending") // pending, contacted, completed
  estimatedValue  Float?   // Agent can add estimated value
  agentNotes      String?  @db.Text
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Testimonial {
  id              Int      @id @default(autoincrement())
  
  // Client Information
  name            String
  email           String
  phone           String?
  location        String   // City, Province or just "Edmonton, AB"
  
  // Testimonial Content
  content         String   @db.Text
  rating          Int      @default(5) // 1-5 star rating
  propertyType    String?  // "Buyer", "Seller", "Rental", etc.
  
  // Media
  avatar          String?  // Profile picture URL
  
  // Admin Management
  approved        Boolean  @default(false) // Admin approval
  featured        Boolean  @default(false) // Show on homepage
  displayOrder    Int?     // Order on homepage (lower = first)
  
  // Metadata
  ipAddress       String?  // For spam prevention
  userAgent       String?  // For spam prevention
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([approved, featured, displayOrder])
  @@index([createdAt])
}