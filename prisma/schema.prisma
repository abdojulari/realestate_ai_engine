// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  password            String?
  firstName           String
  lastName            String
  phone               String?
  preferredContactTime String?
  role                String    @default("user")
  provider            String?   // "google", "facebook", "email"
  providerId          String?   // ID from the provider
  
  // Marketing consent tracking
  marketingConsent    Boolean   @default(false)
  consentDate         DateTime?
  consentIpAddress    String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  properties          Property[]
  savedSearches       SavedSearch[]
  propertyAlerts      PropertyAlert[]
  viewingRequests     ViewingRequest[]
  inquiries           PropertyInquiry[]
  savedProperties     SavedProperty[]
  propertyViews       PropertyView[]
}

model Property {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.Text
  price         Float
  beds          Int
  baths         Float
  sqft          Float
  type          String    // house, condo, townhouse
  status        String    // for_sale, for_rent, sold
  address       String
  city          String
  province      String
  postalCode    String
  latitude      Float
  longitude     Float
  features      Json?
  images        Json      // Array of image URLs
  views         Int       @default(0)
  userId        Int       // Agent/Owner
  user          User      @relation(fields: [userId], references: [id])
  
  // CREA Integration fields
  source        String    @default("manual")  // "manual" or "crea"
  externalId    String?   // CREA ListingKey for MLS properties
  mlsNumber     String?   // MLS listing number
  lastSyncAt    DateTime? // Last time synced from CREA
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  viewingRequests ViewingRequest[]
  inquiries     PropertyInquiry[]
  savedBy       SavedProperty[]
  propertyViews PropertyView[]

  @@unique([source, externalId])
}

model ContentBlock {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  title     String
  content   String   @db.Text
  type      String   // text, html, image, testimonial
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedSearch {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyAlert {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  
  // AI search details
  naturalQuery    String    // "4 bedroom house with garage in Edmonton"
  parsedFilters   Json      // AI-extracted filters
  city            String?   // User's preferred city
  
  // Scheduling
  frequency       String    // "2h", "4h", "12h", "24h", "7d", "14d", "30d"
  isActive        Boolean   @default(true)
  lastRun         DateTime?
  nextRun         DateTime?
  
  // Notification preferences  
  emailEnabled    Boolean   @default(true)
  pushEnabled     Boolean   @default(false)
  
  // Privacy and tracking
  marketingConsent Boolean  @default(false)
  consentDate     DateTime?
  
  // Results tracking
  lastResults     Json?     // Store property IDs from last run
  totalSent       Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ViewingRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  propertyId  Int
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  dateTime    DateTime
  status      String   // pending, approved, rejected, completed
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyInquiry {
  id          Int      @id @default(autoincrement())
  userId      Int
  propertyId  Int
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  message     String   @db.Text
  status      String   // pending, responded, closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SavedProperty {
  id          Int      @id @default(autoincrement())
  userId      Int
  propertyId  Int
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, propertyId])
}

model PropertyView {
  id          Int      @id @default(autoincrement())
  userId      Int?
  propertyId  Int
  user        User?    @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}